Prompt: Analyze the LocalTube folder to understand its structure, purpose, and functionality. 
Follow these steps to study the codebase:

1. Read the README file to gain an overview of the project, its goals, and any setup instructions.

2. Examine the folder structure to understand how the files and directories are organized.

3. Identify the main entry point of the application (e.g., main.py, app.py, index.js) and start analyzing the code flow from there.

4. Study the dependencies and libraries used in the project to understand the external tools and frameworks being utilized.

5. Analyze the core functionality of the project by examining the key modules, classes, and functions.

6. Look for any configuration files (e.g., config.py, .env) to understand how the project is configured and what settings are available.

7. Investigate any tests or test directories to see how the project ensures code quality and handles different scenarios.

8. Review any documentation or inline comments to gather insights into the codebase and its intended behavior.

9. Identify any potential areas for improvement, optimization, or further exploration based on your analysis.

10. Provide a summary of your findings, including the project's purpose, key features, and any notable observations or recommendations.

Use the files and contents provided below to complete this analysis:


README:
README not found.

Folder Structure: LocalTube
.git/ [Ignored .git folder]
.gitignore [Skipped]
app.html
app.js
assets/
build.js [Skipped]
components/
default-thumbnail.jpg [Skipped]
downloader.js [Skipped]
downloads/
LocalTube_contents.txt [Skipped]
main.js
node_modules/
package-lock.json [Skipped]
package.json [Skipped]
pages/
recommendation.js [Skipped]
styles/
styles.css [Skipped]
videoIndexer.js [Skipped]
styles\base.css [Skipped]
styles\components.css [Skipped]
styles\grid.css [Skipped]
styles\header.css [Skipped]
styles\modal.css [Skipped]
styles\player.css [Skipped]
styles\responsive.css [Skipped]
pages\index.html [Skipped]
pages\index.js
pages\player.html [Skipped]
pages\player.js
pages\settings.html [Skipped]
pages\settings.js [Skipped]
components\floating-player.html [Skipped]
components\header.html [Skipped]
components\header.js [Skipped]
components\video-player-manager.js [Skipped]
assets\icon.ico [Skipped]


.git/ [Ignored .git folder]

File: app.html
Content:
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LocalTube App</title>
    <link rel="stylesheet" href="styles/base.css">
    <link rel="stylesheet" href="styles/header.css">
    <link rel="stylesheet" href="styles/player.css">
    <link rel="stylesheet" href="styles/grid.css">
    <link rel="stylesheet" href="styles/modal.css">
    <link rel="stylesheet" href="styles/components.css">
    <link rel="stylesheet" href="styles/responsive.css">
    <link rel="stylesheet" href="https://cdn.plyr.io/3.6.8/plyr.css">
</head>
<body >
    <!-- Header компонент -->
    <div id="header-component"></div>

    <div id="unified-player" class="unified-player minimized">
        <div class="player-wrapper">
            <video id="video-player" class="video-element"></video>
            <div class="player-controls minimized-controls">
                <button id="play-pause-btn" class="control-btn">⏯️</button>
                <button id="expand-btn" class="control-btn">⤢</button>
                <button id="close-btn" class="control-btn">✖️</button>
            </div>
        </div>
    </div>
    <!-- Контейнер для загрузки страниц -->
    <main id="page-content">
        
    </main>

    <!-- Download Modal компонент -->
    <div id="download-modal-component"></div>

    <!-- Скрипты -->
    <script src="app.js"></script>
</body>
</html>

File: app.js
Content:
const { ipcRenderer } = require('electron');
const path = require('path');
const fs = require('fs');
const Plyr = require('plyr');
const ffprobe = require('ffprobe-static');
const ffmpeg = require('fluent-ffmpeg');
const moment = require('moment');
let dragPlayer, dragPlayerEnd, toggleClickToPlayState
const RecommendationSystem = require('./recommendation');
const recommendationSystem  = new RecommendationSystem();

// const VideoPlayerManager = require('./components/video-player-manager');
// window.videoPlayerManager = new VideoPlayerManager();

const loadedScripts = {};
window.currentVideo = null;

// И добавьте функцию для установки текущего видео:
function setCurrentVideo(videoPath) {
    window.currentVideo = videoPath;
}


window.customEvents = new EventTarget();
window.customEvents.on = function(eventName, handler) {
    this.addEventListener(eventName, (event) => handler(event.detail));
  };

// Экспортируйте эту функцию:
window.appFunctions = {
    setCurrentVideo,
    loadPage
};

// Функция для загрузки HTML компонентов
async function loadComponent(id, componentPath) {
    try {
        const response = await fetch(componentPath);
        if (!response.ok) throw new Error(`Failed to fetch component at ${componentPath}`);
        const html = await response.text();
        document.getElementById(id).innerHTML = html;
    } catch (error) {
        console.error("Error loading component:", error);
    }
}

async function loadPage(pageName) {
    try {
        // Очищаем предыдущие ресурсы
        cleanupCurrentPage();
        
        const response = await fetch(`./pages/${pageName}.html`);
        if (!response.ok) throw new Error(`Failed to fetch page at ./pages/${pageName}.html`);
        const html = await response.text();
        document.getElementById("page-content").innerHTML = html;

        // Удаляем предыдущий скрипт
        if (loadedScripts[pageName]) {
            document.body.removeChild(loadedScripts[pageName]);
            delete loadedScripts[pageName];
        }

        const script = document.createElement('script');
        script.src = `./pages/${pageName}.js`;
        script.onload = () => {
            loadedScripts[pageName] = script;
        };
        document.body.appendChild(script);
    } catch (error) {
        console.error("Error loading page:", error);
    }
}

function cleanupCurrentPage() {
    // Очищаем все обработчики событий
    const pageContent = document.getElementById("page-content");
    const oldElement = pageContent.cloneNode(false);
    pageContent.parentNode.replaceChild(oldElement, pageContent);
    
    // Очищаем память от неиспользуемых ресурсов
    if (window.gc) window.gc();
}

// Инициализация приложения
// app.js - в функции initApp
async function initApp() {
    // Загрузка компонентов
    await loadComponent("header-component", "./components/header.html");

    // Загрузка начальной страницы
    await loadPage("index");

    if (!loadedScripts['header']) {
        const headerScript = document.createElement('script');
        headerScript.src = './components/header.js';
        headerScript.onload = () => {
            loadedScripts['header'] = headerScript;
        };
        document.body.appendChild(headerScript);
    }
}



// Запуск инициализации после загрузки DOM
document.addEventListener("DOMContentLoaded", initApp);

// Обработчик для переключения страниц
ipcRenderer.on('navigate', (event, pageName) => {
    loadPage(pageName);
});


ipcRenderer.on('load-video', (event, videoPath) => {
    if (document.getElementById('video-player')) {
        // Если элемент плеера существует, отправляем событие загрузки видео
        document.dispatchEvent(new CustomEvent('video-ready-to-load', { detail: videoPath }));
    } else {
        // Если элемент плеера еще не создан, ждем его создания
        const checkInterval = setInterval(() => {
            if (document.getElementById('video-player')) {
                clearInterval(checkInterval);
                document.dispatchEvent(new CustomEvent('video-ready-to-load', { detail: videoPath }));
            }
        }, 100);
    }
});

File: main.js
Content:
const { app, BrowserWindow, ipcMain, dialog } = require('electron');
const { indexVideos, addActiveDownload, removeActiveDownload } = require('./videoIndexer');
const path = require('path');
const fs = require('fs');

const ffmpeg = require('fluent-ffmpeg');
const crypto = require('crypto');
const VideoDownloader = require('./downloader');
const downloader = new VideoDownloader();

const activeDownloads = new Map();

let mainWindow;
let indexedFolders = [];


const defaultThumbPath = path.join(__dirname, 'default-thumbnail.jpg');

const thumbsDir = path.join(app.getPath('userData'), 'thumbnails');
if (!fs.existsSync(thumbsDir)) {
    fs.mkdirSync(thumbsDir);
    if (fs.existsSync(defaultThumbPath)) {
        fs.copyFileSync(defaultThumbPath, path.join(thumbsDir, 'default-thumbnail.jpg'));
    }
}


function createWindow() {
    mainWindow = new BrowserWindow({
        width: 1200,
        height: 800,
        webPreferences: {
            nodeIntegration: true,
            contextIsolation: false,
            enableRemoteModule: true,
            webSecurity: false,
            allowRunningInsecureContent: true
        }
    });

    mainWindow.setMenu(null);
    mainWindow.loadFile('app.html');
    //mainWindow.webContents.openDevTools();
}

app.whenReady().then(() => {
    createWindow();

    app.on('activate', () => {
        if (BrowserWindow.getAllWindows().length === 0) {
            createWindow();
        }
    });

    // Load settings from settings.json
    const settingsPath = path.join(app.getPath('userData'), 'settings.json');
    if (fs.existsSync(settingsPath)) {
        indexedFolders = JSON.parse(fs.readFileSync(settingsPath, 'utf8'));
    }
});

app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

// Навигация между страницами
ipcMain.on('navigate', (event, pageName) => {
    mainWindow.webContents.send('navigate', pageName);
});

ipcMain.on('get-folders', (event) => {
    event.reply('load-folders', indexedFolders);
});

ipcMain.on('add-folder', (event) => {
    dialog.showOpenDialog({
        properties: ['openDirectory']
    }).then(result => {
        if (!result.canceled) {
            const newFolder = result.filePaths[0];
            if (!indexedFolders.includes(newFolder)) {
                indexedFolders.push(newFolder);
                saveSettings();
                event.reply('load-folders', indexedFolders);
            }
        }
    });
});

ipcMain.on('remove-folder', (event, folder) => {
    indexedFolders = indexedFolders.filter(f => f !== folder);
    saveSettings();
    event.reply('load-folders', indexedFolders);
});

ipcMain.on('index-videos', (event) => {
    const downloadPath = path.join(process.cwd(), 'downloads');
    const allFolders = [...indexedFolders];
    
    if (fs.existsSync(downloadPath) && !allFolders.includes(downloadPath)) {
        allFolders.unshift(downloadPath);
    }

    const videos = indexVideos(allFolders);
    
    const filteredVideos = videos.filter(video => 
        !Array.from(activeDownloads.values()).some(download => 
            download.path === video
        )
    );
    
    event.reply('video-list', filteredVideos);
});

ipcMain.on('open-video', (event, videoPath) => {
    if (fs.existsSync(videoPath)) {
        mainWindow.webContents.send('navigate', 'player');
        // Используем setTimeout, чтобы дать время на загрузку страницы плеера
        setTimeout(() => {
            mainWindow.webContents.send('load-video', videoPath);
        }, 100);
    } else {
        mainWindow.webContents.send('video-not-found', videoPath);
    }
});

ipcMain.handle('get-video-info', async (event, videoUrl) => {
    try {
        return await downloader.getVideoInfo(videoUrl);
    } catch (error) {
        throw error;
    }
});

ipcMain.handle('download-video', async (event, { videoUrl, videoFormat, audioFormat }) => {
    try {
        const downloadId = Date.now().toString();
        const tempPath = path.join(app.getPath('temp'), `${downloadId}.mp4`);
        
        // Добавляем загрузку в активные
        activeDownloads.set(downloadId, {
            id: downloadId,
            url: videoUrl,
            status: 'pending',
            progress: 0,
            tempPath
        });
        
        // Сообщаем всем окнам об обновлении списка загрузок
        BrowserWindow.getAllWindows().forEach(win => {
            win.webContents.send('download-update', Array.from(activeDownloads.values()));
        });

        // Начинаем загрузку
        activeDownloads.get(downloadId).status = 'downloading';
        updateDownloadStatus(downloadId);
        
        const result = await downloader.downloadVideo(videoUrl, videoFormat, audioFormat);
        
        // Обновляем статус на добавление метаданных
        activeDownloads.get(downloadId).status = 'meta';
        updateDownloadStatus(downloadId);
        
        // После успешной загрузки
        activeDownloads.delete(downloadId);
        updateDownloadStatus(downloadId, true);
        
        return result;
    } catch (error) {
        throw error;
    }
});


function updateDownloadStatus(downloadId, finished = false) {
    BrowserWindow.getAllWindows().forEach(win => {
        if (finished) {
            win.webContents.send('download-finished', downloadId);
        } else {
            win.webContents.send('download-update', Array.from(activeDownloads.values()));
        }
    });
}

ipcMain.handle('get-active-downloads', () => {
    return Array.from(activeDownloads.values());
  });

function saveSettings() {
    const settingsPath = path.join(app.getPath('userData'), 'settings.json');
    fs.writeFileSync(settingsPath, JSON.stringify(indexedFolders, null, 2));
}
ipcMain.on('get-user-data-path', (event) => {
    event.returnValue = app.getPath('userData');
});

// Кеш превью
const thumbnailCache = new Map();

ipcMain.handle('get-video-thumbnail', async (event, videoPath) => {
    const videoHash = crypto.createHash('md5').update(videoPath).digest('hex');
    const thumbnailPath = path.join(thumbsDir, `${videoHash}.jpg`);
    const defaultLocalThumb = path.join(thumbsDir, 'default-thumbnail.jpg');

    // Проверяем наличие дефолтного изображения в папке thumbnails
    if (!fs.existsSync(defaultLocalThumb) && fs.existsSync(defaultThumbPath)) {
        fs.copyFileSync(defaultThumbPath, defaultLocalThumb);
    }

    // Проверяем кеш
    if (thumbnailCache.has(videoPath)) {
        return thumbnailCache.get(videoPath);
    }

    // Проверяем существование файла превью
    if (fs.existsSync(thumbnailPath)) {
        thumbnailCache.set(videoPath, thumbnailPath);
        return thumbnailPath;
    }

    // Создаем превью через ffmpeg
    return new Promise((resolve, reject) => {
        // Сначала проверяем наличие видеопотока
        ffmpeg.ffprobe(videoPath, (err, metadata) => {
            if (err) {
                console.error('Error probing video:', err);
                return resolve(defaultLocalThumb);
            }

            const hasVideoStream = metadata.streams.some(stream => stream.codec_type === 'video');
            
            if (!hasVideoStream) {
                console.error('No video stream found');
                return resolve(defaultLocalThumb);
            }

            ffmpeg(videoPath)
                .on('end', () => {
                    thumbnailCache.set(videoPath, thumbnailPath);
                    resolve(thumbnailPath);
                })
                .on('error', (err) => {
                    console.error('Error creating thumbnail:', err);
                    resolve(defaultLocalThumb);
                })
                .screenshots({
                    timestamps: ['10%'],
                    filename: path.basename(thumbnailPath),
                    folder: thumbsDir,
                    size: '320x180'
                });
        });
    });
});

// Очистка кеша при низкой памяти
app.on('web-contents-created', (event, contents) => {
    contents.on('destroyed', () => {
        thumbnailCache.clear();
    });
});

function checkMemoryUsage() {
    const used = process.memoryUsage();
    if (used.heapUsed > 500 * 1024 * 1024) { // 500MB
        thumbnailCache.clear();
        gc && gc();
    }
}

setInterval(checkMemoryUsage, 30000);

File: pages\index.js
Content:

(function() {
    console.log("Index page loaded");

    if (ipcRenderer) {
        ipcRenderer.removeAllListeners('video-list');
        ipcRenderer.removeAllListeners('video-download-complete');
    };

    let videoGrid;
    let allVideos = [];
    function initIndex() {

        videoGrid = document.getElementById('video-grid');
        if (!videoGrid) {
            console.error('Video grid element not found');
            return;
        }

        ipcRenderer.send('index-videos');
    }

    function displayVideos(videos) {
        if (!videoGrid) return;

        videoGrid.innerHTML = '';
        if (videos.length === 0) {
            videoGrid.innerHTML = '<p>No videos found in the downloads folder.</p>';
            return;
        }
        
        const gridWrapper = document.createElement('div');
        gridWrapper.className = 'grid-wrapper';
        
        videos.forEach(videoPath => {
            if (!fs.existsSync(videoPath)) {
                return; // Пропускаем несуществующие файлы
            }

            const videoCard = createVideoCard(videoPath);
            gridWrapper.appendChild(videoCard);
        });
        
        videoGrid.appendChild(gridWrapper);
    }

    function createVideoCard(videoPath) {
        const videoCard = document.createElement('div');
        videoCard.className = 'video-card';
    
        // Создаем контейнер для превью
        const thumbnailContainer = document.createElement('div');
        thumbnailContainer.className = 'video-thumbnail-container';
    
        // Загружаем превью через main process
        ipcRenderer.invoke('get-video-thumbnail', videoPath).then(thumbnailPath => {
            const img = document.createElement('img');
            img.src = thumbnailPath;
            img.className = 'video-thumbnail';
            thumbnailContainer.appendChild(img);
        });
    
        const videoInfo = document.createElement('div');
        videoInfo.className = 'video-card-info';
        
        const title = path.basename(videoPath, path.extname(videoPath))
            .replace(/-\d+$/, '')
            .replace(/_/g, ' ');
            
        videoInfo.innerHTML = `<div class="video-card-title">${title}</div>`;
    
        videoCard.appendChild(thumbnailContainer);
        videoCard.appendChild(videoInfo);
    
        videoCard.addEventListener('click', (e) => {
            e.preventDefault();
            if (fs.existsSync(videoPath)) {
                window.resetMaximizedPlayer();
                window.appFunctions.setCurrentVideo(videoPath);
                window.appFunctions.loadPage('player');
            } else {
                alert('Video file not found');
                updateVideoList();
            }
        });
    
        return videoCard;
    }

    function updateVideoList() {
        ipcRenderer.send('index-videos');
    }

    // Обработчики событий
    ipcRenderer.on('video-list', (event, videos) => {
        allVideos = videos.filter(video => fs.existsSync(video));
        displayVideos(allVideos);
    });

    ipcRenderer.on('video-download-complete', (event, videoPath) => {
        if (fs.existsSync(videoPath)) {
            setTimeout(updateVideoList, 1000);
        }
    });

    // Инициализация страницы
    initIndex();

    // Экспорт функций, которые могут понадобиться извне
    window.indexFunctions = {
        updateVideoList,
        displayVideos
    };
})();

File: pages\player.js
Content:


(function() {
    console.log("Player page loaded");

    let videoPlayer, videoTitle, videoMeta, descriptionText, showMoreBtn, player;
    const unifiedPlayer = document.getElementById('unified-player');

    async function updateRecommendations() {
        if (!window.currentVideo) return;
    
        // Получаем список всех видео
        ipcRenderer.send('index-videos');
        ipcRenderer.once('video-list', async (event, videos) => {
            const recommendations = await recommendationSystem.getRecommendations(
                window.currentVideo,
                videos
            );
            displayRecommendations(recommendations);
        });
    }

    function displayRecommendations(recommendations) {
        const container = document.getElementById('video-list');
        container.innerHTML = '';
    
        recommendations.forEach(({ videoPath, metadata }) => {
            const recommendationItem = document.createElement('div');
            recommendationItem.className = 'recommendation-item';
    
            const thumbnailContainer = document.createElement('div');
            thumbnailContainer.className = 'recommendation-thumbnail';
    
            // Загружаем превью
            ipcRenderer.invoke('get-video-thumbnail', videoPath).then(thumbnailPath => {
                const img = document.createElement('img');
                img.src = thumbnailPath;
                thumbnailContainer.appendChild(img);
            });
    
            const infoContainer = document.createElement('div');
            infoContainer.className = 'recommendation-info';
    
            const title = document.createElement('div');
            title.className = 'recommendation-title';
            title.textContent = metadata.title;
    
            const description = document.createElement('div');
            description.className = 'recommendation-description';
            description.textContent = metadata.description.replace(/`n`r/g, '\n');
    
            const views = document.createElement('div');
            views.className = 'recommendation-views';
            views.textContent = `${metadata.views.toLocaleString()} views`;
    
            infoContainer.appendChild(title);
            infoContainer.appendChild(description);
            infoContainer.appendChild(views);
    
            recommendationItem.appendChild(thumbnailContainer);
            recommendationItem.appendChild(infoContainer);
    
            recommendationItem.addEventListener('click', () => {
                window.currentVideo = videoPath;
                window.globalPlayer.source = {
                    type: 'video',
                    sources: [{ src: videoPath, type: 'video/mp4' }]
                };
                window.currentVideoSource = window.currentVideo;
                loadVideoMetadata(videoPath);
                recommendationSystem.updateWatchHistory(videoPath);
                updateRecommendations();
            });
    
            container.appendChild(recommendationItem);
        });
    }

    async function initPlayer() {
        
        // Добавляем класс для страницы плеера
        document.getElementById('page-content').classList.add('player-page');
        
        document.removeEventListener('mousemove', dragPlayer);
        document.removeEventListener('mouseup', dragPlayerEnd);
        

        // Настраиваем unified-player для полноэкранного режима
        unifiedPlayer.classList.remove('minimized');
        unifiedPlayer.classList.add('maximized');
        unifiedPlayer.classList.add('visible');

        videoPlayer = document.getElementById('video-player');
        videoTitle = document.getElementById('video-title');
        videoMeta = document.getElementById('video-meta');
        descriptionText = document.getElementById('description-text');
        showMoreBtn = document.getElementById('show-more');

        // Проверяем существует ли уже плеер
        if (!window.globalPlayer) {
            // Инициализируем Plyr только если его еще нет
            window.globalPlayer = new Plyr(videoPlayer, {
                controls: [
                    'play-large', 'play', 'progress', 'current-time', 'mute',
                    'volume', 'captions', 'settings', 'pip', 'airplay', 'fullscreen'
                ],
                settings: ['captions', 'quality', 'speed', 'loop'],
                tooltips: { controls: true, seek: true },
                debug: false
            });
        }
        if (window.playerState) {
            window.playerState.isMinimized = false;
        }
        if (window.currentVideo) {
            await updateRecommendations();
            await loadVideoMetadata(window.currentVideo);
            // Проверяем, не совпадает ли текущий источник с новым
            StartGlowAnimation();
            if (window.currentVideoSource === window.currentVideo) {
                console.log('Same video, skipping...');
                return;
            }
            filePath = window.currentVideo;
            try {
                window.globalPlayer.source = {
                    type: 'video',
                    sources: [{ src: filePath, type: 'video/mp4' }],
                };
                window.currentVideoSource = window.currentVideo;
                recommendationSystem.updateWatchHistory(window.currentVideo);
               
                window.globalPlayer.on('loadedmetadata', () => {
                    window.globalPlayer.play().catch(error => {
                        console.error('Error auto-playing video:', error);
                    });
                });
            } catch (error) {
                console.error('Error loading video:', error);
            }
        }
    }

    function cleanup() {
        document.getElementById('page-content').classList.remove('player-page');
        if (player) {
            window.currentVideoTime = player.currentTime;
            window.isVideoPlaying = !player.paused;
            player.destroy();
        }
    }


    // async function loadVideo(filePath) {
    //     videoPlayer.src = filePath;
    //     try {
    //         await loadVideoMetadata(filePath);

    //         player.source = {
    //             type: 'video',
    //             sources: [{ src: filePath, type: 'video/mp4' }],
    //         };
           
    //         player.on('loadedmetadata', () => {
    //             player.play().catch(error => {
    //                 console.error('Error auto-playing video:', error);
    //             });
    //         });

    //     } catch (error) {
    //         console.error('Error loading video:', error);
    //     }
    // }

    function loadVideoMetadata(filePath) {
        return new Promise((resolve, reject) => {
            ffmpeg.setFfprobePath(ffprobe.path);
            
            ffmpeg.ffprobe(filePath, (err, metadata) => {
                if (err) {
                    console.error('Error reading metadata:', err);
                    const fallbackData = {
                        title: path.basename(filePath, path.extname(filePath))
                            .replace(/-\d+$/, '')
                            .replace(/_/g, ' '),
                        format: 'Unknown format',
                        description: 'No description available'
                    };
                    
                    updateVideoInfo(fallbackData);
                    resolve(fallbackData);
                    return;
                }
    
                try {
                    const videoData = {
                        title: metadata.format.tags?.title || path.basename(filePath, path.extname(filePath))
                            .replace(/-\d+$/, '')
                            .replace(/_/g, ' '),
                        format: metadata.format.format_name || 'Unknown format',
                        description: metadata.format.tags?.comment?.replace(/`n`r/g, '\n') || 'No description available'
                    };
    
                    updateVideoInfo(videoData);
                    resolve(videoData);
                } catch (error) {
                    console.error('Error processing metadata:', error);
                    reject(error);
                }
            });
        });
    }
    
    function updateVideoInfo(videoData) {
        videoTitle.textContent = videoData.title;
        videoMeta.textContent = videoData.format;
        
        const descriptionText = document.getElementById('description-text');
        let showMoreButton = document.getElementById('show-more');
        
        // Если кнопка не существует, создаем ее
        if (!showMoreButton) {
            showMoreButton = document.createElement('button');
            showMoreButton.id = 'show-more';
            descriptionText.parentNode.insertBefore(showMoreButton, descriptionText.nextSibling);
        }
        
        const maxHeight = 100; // Максимальная высота в пикселях для сокращенного описания
        
        descriptionText.textContent = videoData.description;
        descriptionText.style.maxHeight = `${maxHeight}px`;
        descriptionText.style.overflow = 'hidden';
        
        showMoreButton.style.display = 'block';
        showMoreButton.textContent = 'Показать больше';
        
        function toggleDescription() {
            if (descriptionText.style.maxHeight) {
                descriptionText.style.maxHeight = null;
                showMoreButton.textContent = 'Показать меньше';
            } else {
                descriptionText.style.maxHeight = `${maxHeight}px`;
                showMoreButton.textContent = 'Показать больше';
            }
        }
        
        showMoreButton.onclick = toggleDescription;
        
        // Проверяем, нужна ли кнопка "Показать больше"
        setTimeout(() => {
            if (descriptionText.scrollHeight <= maxHeight) {
                showMoreButton.style.display = 'none';
            } else {
                showMoreButton.style.display = 'block';
            }
        }, 0);
    }

    function formatBitrate(bitrate) {
        if (!bitrate) return 'Unknown bitrate';
        return `${Math.round(bitrate / 1000)} kbps`;
    }

    // В player.js
    function StartGlowAnimation() {
        const mainPlayer = document.querySelector('.main-player');
        let glowElement = document.querySelector('.video-glow');
        
        if (!glowElement) {
            glowElement = document.createElement('div');
            glowElement.classList.add('video-glow');
            mainPlayer.prepend(glowElement);
        }
    
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d', { willReadFrequently: true });
    
        // Храним предыдущие значения для интерполяции
        const colorHistory = Array(5).fill({ r: 0, g: 0, b: 0, opacity: 0 });
        let prevColors = { r: 0, g: 0, b: 0, opacity: 0 };
        let targetColors = { r: 0, g: 0, b: 0, opacity: 0 };
        let isAnimating = false;
        
        function bezierEasing(t) {
            return t * t * (3 - 2 * t); // Более плавная кривая
        }
    
        // Функция плавной интерполяции
        function smoothLerp(start, end, factor) {
            const t = bezierEasing(factor);
            return start + (end - start) * t;
        }
    
        // Функция для вычисления среднего значения из истории
        function getAverageFromHistory() {
            const sum = colorHistory.reduce((acc, color) => ({
                r: acc.r + color.r,
                g: acc.g + color.g,
                b: acc.b + color.b,
                opacity: acc.opacity + color.opacity
            }), { r: 0, g: 0, b: 0, opacity: 0 });
    
            return {
                r: sum.r / colorHistory.length,
                g: sum.g / colorHistory.length,
                b: sum.b / colorHistory.length,
                opacity: sum.opacity / colorHistory.length
            };
        }

        function analyzeVideo() {
            const video = window.globalPlayer.media;
        
            if (!video || video.readyState < 3) {
                return;
            }
        
            try {
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
        
                // Увеличим область захвата цвета
                const edgeWidth = Math.floor(canvas.width * 0.2); // Увеличили с 0.1 до 0.2
                const edgeHeight = Math.floor(canvas.height * 0.2);
        
                // Берем больше данных с краев и центра
                const centerX = Math.floor(canvas.width / 2 - edgeWidth / 2);
                const centerY = Math.floor(canvas.height / 2 - edgeHeight / 2);
        
                const topData = ctx.getImageData(0, 0, canvas.width, edgeHeight).data;
                const bottomData = ctx.getImageData(0, canvas.height - edgeHeight, canvas.width, edgeHeight).data;
                const leftData = ctx.getImageData(0, 0, edgeWidth, canvas.height).data;
                const rightData = ctx.getImageData(canvas.width - edgeWidth, 0, edgeWidth, canvas.height).data;
                const centerData = ctx.getImageData(centerX, centerY, edgeWidth, edgeHeight).data;
        
                const allData = [...topData, ...bottomData, ...leftData, ...rightData, ...centerData];
        
                let r = 0, g = 0, b = 0, samples = 0;
                let maxBrightness = 0;
        
                // Анализируем каждый восьмой пиксель для оптимизации
                for (let i = 0; i < allData.length; i += 8) {
                    const pixelR = allData[i];
                    const pixelG = allData[i + 1];
                    const pixelB = allData[i + 2];
                    
                    // Усиливаем яркие цвета
                    const pixelBrightness = (pixelR + pixelG + pixelB) / 3;
                    maxBrightness = Math.max(maxBrightness, pixelBrightness);
        
                    r += pixelR;
                    g += pixelG;
                    b += pixelB;
                    samples++;
                }
        
                r = Math.round(r / samples);
                g = Math.round(g / samples);
                b = Math.round(b / samples);
        
                // Усиливаем цвета
                const colorEnhanceFactor = 1.5; // Фактор усиления цвета
                r = Math.min(255, Math.round(r * colorEnhanceFactor));
                g = Math.min(255, Math.round(g * colorEnhanceFactor));
                b = Math.min(255, Math.round(b * colorEnhanceFactor));

                // Рассчитываем яркость и непрозрачность
                const brightness = maxBrightness / 255;
                const opacity = Math.min(Math.max(brightness * 0.8, 0.2), 0.7); // Минимальная прозрачность 0.2, максимальная 0.7
        
                const newColors = { r, g, b, opacity };
        
                colorHistory.shift();
                colorHistory.push(newColors);

                // Обновляем целевые значения
                const averageColors = getAverageFromHistory();
                targetColors = averageColors;
        
                if (!isAnimating) {
                    isAnimating = true;
                    animateGlow();
                }
            } catch (error) {
                console.error('Error in video analysis:', error);
            }
        }
        
        function animateGlow() {
            // Используем очень маленький шаг для максимальной плавности
            const factor = 0.03;
    
            // Применяем сглаженную интерполяцию
            prevColors.r = smoothLerp(prevColors.r, targetColors.r, factor);
            prevColors.g = smoothLerp(prevColors.g, targetColors.g, factor);
            prevColors.b = smoothLerp(prevColors.b, targetColors.b, factor);
            prevColors.opacity = smoothLerp(prevColors.opacity, targetColors.opacity, factor);
    
            // Создаем градиент с промежуточными точками для большей плавности
            glowElement.style.background = `
                linear-gradient(
                    rgba(${Math.round(prevColors.r)},${Math.round(prevColors.g)},${Math.round(prevColors.b)},${prevColors.opacity}) 0%,
                    rgba(${Math.round(prevColors.r)},${Math.round(prevColors.g)},${Math.round(prevColors.b)},${prevColors.opacity * 0.8}) 40%,
                    rgba(${Math.round(prevColors.r)},${Math.round(prevColors.g)},${Math.round(prevColors.b)},${prevColors.opacity * 0.5}) 70%,
                    rgba(${Math.round(prevColors.r)},${Math.round(prevColors.g)},${Math.round(prevColors.b)},0) 100%
                )
            `;
    
            // Проверяем разницу с большей точностью
            const isDifferenceSignificant = 
                Math.abs(prevColors.r - targetColors.r) > 0.05 ||
                Math.abs(prevColors.g - targetColors.g) > 0.05 ||
                Math.abs(prevColors.b - targetColors.b) > 0.05 ||
                Math.abs(prevColors.opacity - targetColors.opacity) > 0.0005;
    
            if (isDifferenceSignificant) {
                requestAnimationFrame(animateGlow);
            } else {
                isAnimating = false;
            }
        }
    
        // Стили для glow эффекта
        const style = document.createElement('style');
        style.textContent = `
            .video-glow {
                position: absolute;
                margin: 20px 20px 20px 6%;
                width: 60vw;
                aspect-ratio: 16/9;
                pointer-events: none;
                z-index: -1;
                filter: blur(70px);
                transition: background 0.3s ease-out;
                transform: scale(1.1) translateY(10%);
            }

            @media (max-width: 1200px) {
                .video-glow {
                    width: calc(100vw - 40px);
                    margin: 20px 20px 20px 10px;
                    transform: scale(1.1) translateY(10%);
                }
            }
        `;
        document.head.appendChild(style);

        function throttle(func, limit) {
            let inThrottle;
            return function(...args) {
                if (!inThrottle) {
                    func.apply(this, args);
                    inThrottle = true;
                    setTimeout(() => inThrottle = false, limit);
                }
            };
        }
        
        // Создаем throttled версию analyzeVideo
        const throttledAnalyze = throttle(analyzeVideo, 1000);
        
        // Используем requestAnimationFrame более эффективно
        let animationFrameId = null;
        
        function startAnalysis() {
            if (animationFrameId) return; // Предотвращаем множественные запуски
        
            function analyze() {
                throttledAnalyze();
                animationFrameId = requestAnimationFrame(analyze);
            }
        
            animationFrameId = requestAnimationFrame(analyze);
        }
        
        function stopAnalysis() {
            if (animationFrameId) {
                cancelAnimationFrame(animationFrameId);
                animationFrameId = null;
            }
        }
        
        // Обработчики событий плеера
        window.globalPlayer.on('pause ended', stopAnalysis);
        window.globalPlayer.on('play', startAnalysis);
        window.customEvents.on('minimizedChanged', (value) => {
            if (value === true) {
              stopAnalysis();
            } else if (value === false) {
              startAnalysis();
            }
          });
        
        // Запускаем анализ
        startAnalysis();
        
        // Функция очистки
        return () => {
            stopAnalysis();
            if (glowElement) {
                glowElement.remove();
            }
        };
    }
    // Инициализация плеера при загрузке страницы
    initPlayer();
    return { cleanup };
})();

